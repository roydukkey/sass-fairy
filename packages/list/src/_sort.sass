// Copyright (c) roydukkey. All rights reserved.
// Licensed under the MIT. See LICENSE file in the project root for full license information.

@use 'sass:list'
@use 'sass:math'
@use 'sass:meta'
@use '@sass-fairy/exception/src/is-separator-invalid'
@use '@sass-fairy/exception/src/parameter'
@use '@sass-fairy/exception/src/parameter-type'
@use '@sass-fairy/exception/src/separator'
@use 'compare'
@use 'empty'
@use 'find'
@use 'slice'


///
/// @throw `#{$compare}` is not a function.
/// @throw `#{$center}` is not a number.
/// @throw Must be "auto" or zero with or without units.
/// @throw Must be "space", "comma", "slash", or "auto".
///
@function sort($list, $compare: compare.string(), $center: auto, $separator: auto)

	@if meta.type-of($compare) != 'function'
		@error parameter-type.parameter-type('sort', 'compare', $compare, 'function')

	@if is-separator-invalid.is-separator-invalid($separator)
		@error separator.separator('sort')

	@if $separator == 'auto' and meta.type-of($list) == 'map'
		$separator: 'comma'

	$length: list.length($list)

	@if $center != auto

		@if meta.type-of($center) != 'number'
			@error parameter-type.parameter-type('sort', 'center', $center, 'number')

		@if $center < 0 or $center > 0
			@error parameter.parameter('Must be "auto" or zero with or without units', 'sort', 'center')

	@else
		$item: find.find($list, meta.get-function('_is-number-and-not-unitless'))
		$center: if($item == null, 0, $item - $item)

	@if $length < 2
		@if meta.type-of($list) == 'map'
			@return list.join($list, (), $separator)
		@else
			@return $list

	$middle: math.floor(math.div($length, 2))
	$left: slice.slice($list, 1, $middle)
	$right: slice.slice($list, $middle + 1)

	@return _order(sort($left, $compare, $center), sort($right, $compare, $center), $compare, $center, $separator)


///
/// Orders and merges the items for a subset of a list.
///
/// @param {List} $left - The left side of the list being sorted.
/// @param {List} $right - The right side of the list being sorted.
/// @param {Function} $compare - The function that defines the sort order.
/// @param {Number} $center - For numeric comparison, the value indicating the center (zero) position between positive and negative values.
/// @param {String} $separator [auto] - The type of separator to be used by the returned list.
/// @return {List}
///
@function _order($left, $right, $compare, $center, $separator)
	$result: empty.empty($list: $left)
	$left-index: 1
	$right-index: 1
	$left-length: list.length($left)
	$right-length: list.length($right)

	@while $left-index <= $left-length and $right-index <= $right-length
		$left-value: list.nth($left, $left-index)
		$right-value: list.nth($right, $right-index)

		@if meta.call($compare, $left-value, $right-value, $center) < 0
			$result: list.append($result, $left-value)
			$left-index: $left-index + 1

		@else
			$result: list.append($result, $right-value)
			$right-index: $right-index + 1

	$remainder: if($left-index < $right-index, slice.slice($left, $left-index), slice.slice($right, $right-index))

	@return list.join($result, $remainder, $separator)


///
/// Determines whether a value is a number and is not unitless.
///
/// @param {*} $value - The value to be tested.
///
@function _is-number-and-not-unitless($value, $args...)
	@return meta.type-of($value) == 'number' and not math.is-unitless($value)
