// Copyright (c) roydukkey. All rights reserved.
// Licensed under the MIT. See LICENSE file in the project root for full license information.

@use '@sass-fairy/url' as src
@use 'true'


@include true.describe('@function url.data')

	@include true.it('Creates url() for the given data')
		$assert: src.data('Hello, 100% of World!')
		$expected: url("data:text/plain,Hello, 100%25 of World!")
		@include true.assert-equal($assert, $expected)

	@include true.it('Creates url() for the given data without encoding')
		$assert: src.data('Hello, 100% of World!', $encode: false)
		$expected: url("data:text/plain,Hello, 100% of World!")
		@include true.assert-equal($assert, $expected)

	@include true.it('Creates url() for the given data as the provided type')
		$assert: src.data('<svg viewBox="0 0 100 100"><circle fill="#f00" cx="50" cy="50" r="50"/></svg>', 'image/svg+xml')
		$expected: url('data:image/svg+xml,<svg viewBox="0 0 100 100"><circle fill="%23f00" cx="50" cy="50" r="50"/></svg>')
		@include true.assert-equal($assert, $expected)

	@include true.it('Creates url() for the given data as the provided type without encoding')
		$assert: src.data('<svg viewBox="0 0 100 100"><circle fill="#f00" cx="50" cy="50" r="50"/></svg>', 'image/svg+xml', $encode: false)
		$expected: url('data:image/svg+xml,<svg viewBox="0 0 100 100"><circle fill="#f00" cx="50" cy="50" r="50"/></svg>')
		@include true.assert-equal($assert, $expected)

	@include true.it('Throws when $data is not a string')
		$assert: src.data(null)
		$expected: 'ERROR: $data: `null` is not a string for `data()`.'
		@include true.assert-equal($assert, $expected)

	@include true.it('Throws when $media-type is not a string')
		$assert: src.data('', null)
		$expected: 'ERROR: $media-type: `null` is not a string for `data()`.'
		@include true.assert-equal($assert, $expected)

	@include true.it('Throws when $encode is not a boolean')
		$assert: src.data('', '', null)
		$expected: 'ERROR: $encode: `null` is not a boolean for `data()`.'
		@include true.assert-equal($assert, $expected)
