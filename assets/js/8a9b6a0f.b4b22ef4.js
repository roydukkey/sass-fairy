"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4515],{6735:(e,t,r)=>{r.d(t,{Z:()=>s});var i=r(575),n=r(9231),a=r(2470);const s=e=>{let{children:t}=e;return n.createElement(i.Z,{spec:a.Z},t)}},2470:(e,t,r)=>{r.d(t,{Z:()=>i});const i={module:"meta",description:JSON.parse('{"WL":"Provides extended functionality for handling Sass\u2019s inner workings"}').WL,basePath:"/api/meta",hiddenNativeFields:["type-of"],functions:{"call-or-reference":{group:"main",description:"Allows a function to return its reference when no parameters are provided, otherwise maintaining its regular behavior.",parameters:{function:{description:"The function to call or reference.",type:["Function"]},args:{description:"The arguments to apply to the invocation of the function.",type:["ArgList<*>"]}},return:{description:"The given function is returned when no arguments are given; otherwise, supplied with the given arguments, the value returned by the invocation of the given function is returned.",type:["Function","*"]}},"get-keyword":{group:"main",description:"Gets the value of the named parameter from the given argument list, otherwise providing a default value.",parameters:{args:{description:"The argument list from which to get the named parameter.",type:["!ArgList"]},name:{description:"The name of the parameter to get.",type:["String"]},default:{description:"The value of the parameter when not contained in the argument list.",type:["*"],defaultValue:"null"}},return:{description:"The value of the named parameter when it exists; otherwise, the given default value.",type:["*"]}},"strip-keywords":{group:"main",description:"Strips all named parameters from the given argument list.",parameters:{args:{description:"The argument list from which to strip all named parameters.",type:["!ArgList"]}},return:{description:"Returns the values of an argument list without named parameters.",type:["List"]}},"type-of":{group:"main",description:"Returns the type of the given value.",parameters:{value:{description:"The value from which to get a type.",type:["*"]}},return:{description:"Returns an unquoted string describing the type of value given.",type:["String"]}}}}},6145:(e,t,r)=>{r.d(t,{ZP:()=>s});var i=r(7626),n=(r(9231),r(4852));const a={toc:[]};function s(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,i.Z)({},a,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scss"},"@use 'sass:list';\n@use '@sass-fairy/meta';\n\n// 1. Extend `list.zip($list...)` to include `$bracketed` parameter.\n@function zip-it($list...) {\n  $bracketed: meta.get-keyword($list, 'bracketed', auto);\n\n  // Keywords must be stripped, otherwise\n  // they will spread to `list.zip()` where the are not accepted.\n  $list: meta.strip-keywords($list);\n  $list: list.zip($list...);\n\n  @return list.join($list, (), $bracketed: $bracketed);\n}\n\n// 2. Consuming the extended function\n@debug zip-it(10px 50px 100px, short mid long, $bracketed: true);\n  // [10px short, 50px mid, 100px long]\n")))}s.isMDXComponent=!0},7690:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var i=r(7626),n=(r(9231),r(4852)),a=r(6735),s=r(6145);const o={title:"strip-keywords ()",module:"meta",sidebar_label:"strip-keywords",sidebar_class_name:"function",hide_table_of_contents:!0},p=void 0,d={unversionedId:"api/meta/strip-keywords",id:"api/meta/strip-keywords",title:"strip-keywords ()",description:"",source:"@site/docs/api/meta/strip-keywords.mdx",sourceDirName:"api/meta",slug:"/api/meta/strip-keywords",permalink:"/next/api/meta/strip-keywords",draft:!1,editUrl:"https://github.com/roydukkey/sass-fairy/edit/master/website/docs/api/meta/strip-keywords.mdx",tags:[],version:"current",frontMatter:{title:"strip-keywords ()",module:"meta",sidebar_label:"strip-keywords",sidebar_class_name:"function",hide_table_of_contents:!0},sidebar:"metaSidebar",previous:{title:"get-keyword",permalink:"/next/api/meta/get-keyword"},next:{title:"type-of",permalink:"/next/api/meta/type-of"}},l={},u=[],m={toc:u};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,i.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)(a.Z,{mdxType:"FieldDetails"}),(0,n.kt)(s.ZP,{mdxType:"Example"}))}c.isMDXComponent=!0}}]);