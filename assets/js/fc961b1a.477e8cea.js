"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8679],{1534:(e,t,r)=>{r.d(t,{Z:()=>s});var n=r(575),i=r(9231),a=r(1649);const s=e=>{let{children:t}=e;return i.createElement(n.Z,{spec:a.Z},t)}},1649:(e,t,r)=>{r.d(t,{Z:()=>n});const n={module:"meta",description:JSON.parse('{"WL":"Provides extended functionality for handling Sass\u2019s inner workings"}').WL,basePath:"/api/meta",functions:{"call-or-reference":{group:"main",description:"Allows a function to return its reference when no parameters are provided, otherwise maintaining its regular behavior.",parameters:{function:{description:"The function to call or reference.",type:["Function"]},args:{description:"The arguments to apply to the invocation of the function.",type:["ArgList<*>"]}},return:{description:"The given function is returned when no arguments are given; otherwise, supplied with the given arguments, the value returned by the invocation of the given function is returned.",type:["Function","*"]}},"get-keyword":{group:"main",description:"Gets the value of the named parameter from the given argument list, otherwise providing a default value.",parameters:{args:{description:"The argument list from which to get the named parameter.",type:["!ArgList"]},name:{description:"The name of the parameter to get.",type:["String"]},default:{description:"The value of the parameter when not contained in the argument list.",type:["*"],defaultValue:"null"}},return:{description:"The value of the named parameter when it exists; otherwise, the given default value.",type:["*"]}},"strip-keywords":{group:"main",description:"Strips all named parameters from the given argument list.",parameters:{args:{description:"The argument list from which to strip all named parameters.",type:["!ArgList"]}},return:{description:"Returns the values of an argument list without named parameters.",type:["List"]}}}}},5172:(e,t,r)=>{r.d(t,{ZP:()=>s});var n=r(7626),i=(r(9231),r(4852));const a={toc:[]};function s(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},a,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scss"},"@use 'sass:list';\n@use '@sass-fairy/meta';\n\n// 1. Extend `list.zip($list...)` to include `$bracketed` parameter.\n@function zip-it($list...) {\n  $bracketed: meta.get-keyword($list, 'bracketed', auto);\n\n  // Keywords must be stripped, otherwise\n  // they will spread to `list.zip()` where the are not accepted.\n  $list: meta.strip-keywords($list);\n  $list: list.zip($list...);\n\n  @return list.join($list, (), $bracketed: $bracketed);\n}\n\n// 2. Consuming the extended function\n@debug zip-it(10px 50px 100px, short mid long, $bracketed: true);\n  // [10px short, 50px mid, 100px long]\n")))}s.isMDXComponent=!0},10:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var n=r(7626),i=(r(9231),r(4852)),a=r(1534),s=r(5172);const o={title:"get-keyword ()",module:"meta",sidebar_label:"get-keyword",sidebar_class_name:"function",hide_table_of_contents:!0},d=void 0,p={unversionedId:"api/meta/get-keyword",id:"version-1/api/meta/get-keyword",title:"get-keyword ()",description:"",source:"@site/versioned_docs/version-1/api/meta/get-keyword.mdx",sourceDirName:"api/meta",slug:"/api/meta/get-keyword",permalink:"/api/meta/get-keyword",draft:!1,editUrl:"https://github.com/roydukkey/sass-fairy/edit/master/website/versioned_docs/version-1/api/meta/get-keyword.mdx",tags:[],version:"1",frontMatter:{title:"get-keyword ()",module:"meta",sidebar_label:"get-keyword",sidebar_class_name:"function",hide_table_of_contents:!0},sidebar:"metaSidebar",previous:{title:"call-or-reference",permalink:"/api/meta/call-or-reference"},next:{title:"strip-keywords",permalink:"/api/meta/strip-keywords"}},l={},m=[],c={toc:m};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(a.Z,{mdxType:"FieldDetails"}),(0,i.kt)(s.ZP,{mdxType:"Example"}))}u.isMDXComponent=!0}}]);