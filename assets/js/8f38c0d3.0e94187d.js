"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1808],{4567:(e,t,r)=>{r.d(t,{Z:()=>l});var a=r(575),n=r(9231),o=r(6867);const l=e=>{let{children:t}=e;return n.createElement(a.Z,{spec:o.Z},t)}},6867:(e,t,r)=>{r.d(t,{Z:()=>o});var a=r(3235),n=r(9231);const o={module:"url",description:a.WL,basePath:"/api/url",functions:{data:{group:"main",description:n.createElement(n.Fragment,null,"Creates a ",n.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs",target:"_blank",rel:"nofollow noreferrer noopener"},"data URL")," for the provided data of the specified type."),parameters:{data:{description:"The data which is to be delivered by the URL.",type:["String"]},"media-type":{description:n.createElement(n.Fragment,null,"The media type indicates the ",n.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types",target:"_blank",rel:"nofollow noreferrer noopener"},"MIME type")," to be delivered by the URL."),type:["String"],defaultValue:"'text/plain'"},encode:{description:n.createElement(n.Fragment,null,"Whether or not the given data should be ",n.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding",target:"_blank",rel:"nofollow noreferrer noopener"},"percent-encoded"),"."),defaultValue:!0,type:["Boolean"]}},return:{description:n.createElement(n.Fragment,null,"A new string representing a data URL."),type:["String"]}},encode:{group:"main",description:n.createElement(n.Fragment,null,n.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding",target:"_blank",rel:"nofollow noreferrer noopener"},"Percent-encodes")," a URL component, replacing each instance of certain characters by escape sequences representing the UTF-8 encoding of the characters."),parameters:{string:{description:"The URL component to be encoded.",type:["String"]}},return:{description:n.createElement(n.Fragment,null,"A new string representing the provided string encoded for use by the ",n.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/url",target:"_blank",rel:"nofollow noreferrer noopener"},n.createElement("code",null,"url()"))," function."),type:["String"]}},svg:{group:"main",description:n.createElement(n.Fragment,null,"Creates a ",n.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs",target:"_blank",rel:"nofollow noreferrer noopener"},"data URL")," for the provided SVG, escaping the required characters."),parameters:{data:{description:"The data containing the SVG which is to be delivered by the URL.",type:["ArgList<*>"]}},return:{description:n.createElement(n.Fragment,null,"A new string representing a data URL delivering an SVG."),type:["String"]}}}}},5226:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=r(7626),n=(r(9231),r(4852)),o=r(4567);const l={title:"data ()",module:"url",sidebar_label:"data",sidebar_class_name:"function",hide_table_of_contents:!0},i=void 0,s={unversionedId:"api/url/data",id:"api/url/data",title:"data ()",description:"",source:"@site/docs/api/url/data.mdx",sourceDirName:"api/url",slug:"/api/url/data",permalink:"/next/api/url/data",draft:!1,editUrl:"https://github.com/roydukkey/sass-fairy/edit/master/website/docs/api/url/data.mdx",tags:[],version:"current",frontMatter:{title:"data ()",module:"url",sidebar_label:"data",sidebar_class_name:"function",hide_table_of_contents:!0},sidebar:"urlSidebar",previous:{title:"URL API Overview",permalink:"/next/api/url/"},next:{title:"encode",permalink:"/next/api/url/encode"}},d={},c=[],p={toc:c};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)(o.Z,{mdxType:"FieldDetails"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scss"},'@use \'@sass-fairy/url\';\n\n// 1. Simple text\n@debug url.data(\'Hello, 100% of World!\');\n  // url(\'data:text/plain,Hello, 100%25 of World!\'\')\n\n// 2. SVG data\n$svg: \'<svg viewBox="0 0 100 100"><circle fill="#f00" cx="50" cy="50" r="50"/></svg>\';\n\n@debug url.data($svg, \'image/svg+xml\');\n  // url(\'data:image/svg+xml,<svg viewBox="0 0 100 100"><circle fill="%23f00" cx="50" cy="50" r="50"/></svg>\')\n')))}u.isMDXComponent=!0},3235:e=>{e.exports=JSON.parse('{"WL":"Provides Sass functions for working with URL data, encoding, and inline SVGs"}')}}]);