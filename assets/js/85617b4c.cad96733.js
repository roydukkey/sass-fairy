"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6779],{113:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=i(7626),a=(i(9231),i(4852));const o={sidebar_label:"List Modifiers"},s="List Configuration Modifiers",l={unversionedId:"docs/list-modifiers",id:"docs/list-modifiers",title:"List Configuration Modifiers",description:"Functions that work on lists should accepts parameters that modify list configuration according to the conditions outline below.",source:"@site/docs/docs/list-modifiers.mdx",sourceDirName:"docs",slug:"/docs/list-modifiers",permalink:"/next/docs/list-modifiers",draft:!1,editUrl:"https://github.com/roydukkey/sass-fairy/edit/master/website/docs/docs/list-modifiers.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"List Modifiers"},sidebar:"docsSidebar",previous:{title:"Comparison Logic",permalink:"/next/docs/compare-logic"},next:{title:"Advanced Usage",permalink:"/next/docs/advanced"}},r={},d=[{value:"Delimiting Punctuation",id:"delimiting-punctuation",level:2},{value:"Enclosing Punctuation",id:"enclosing-punctuation",level:2}],c={toc:d};function p(t){let{components:e,...i}=t;return(0,a.kt)("wrapper",(0,n.Z)({},c,i,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"list-configuration-modifiers"},"List Configuration Modifiers"),(0,a.kt)("p",null,"Functions that work on lists should accepts parameters that modify list configuration according to the conditions outline below."),(0,a.kt)("h2",{id:"delimiting-punctuation"},"Delimiting Punctuation"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"$separator")," parameter should be accepted when returning a list."),(0,a.kt)("h2",{id:"enclosing-punctuation"},"Enclosing Punctuation"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"$bracketed")," parameter should be accepted when returning a list..."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"...and bracket style cannot be singularly determined from the input."),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/next/api/list/concat"},(0,a.kt)("inlineCode",{parentName:"a"},"list.concat()"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/next/api/list/empty"},(0,a.kt)("inlineCode",{parentName:"a"},"list.empty()"))),(0,a.kt)("li",{parentName:"ol"},"etc."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"...that is not a subset of a source list and a potential input value."),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/next/api/list/map"},(0,a.kt)("inlineCode",{parentName:"a"},"list.map()"))),(0,a.kt)("li",{parentName:"ol"},"etc.")))))}p.isMDXComponent=!0}}]);