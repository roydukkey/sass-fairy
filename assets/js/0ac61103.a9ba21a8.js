"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9236],{7268:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>n,metadata:()=>o,toc:()=>l});var a=s(7626),r=(s(9231),s(4852));const n={},i="Regular Expressions",o={unversionedId:"docs/regular-expressions",id:"docs/regular-expressions",title:"Regular Expressions",description:"Often shortened to Regex or RegExp, regular expressions are a common feature of JavaScript. They use syntax to describe patterns of characters in strings.",source:"@site/docs/docs/regular-expressions.mdx",sourceDirName:"docs",slug:"/docs/regular-expressions",permalink:"/next/docs/regular-expressions",draft:!1,editUrl:"https://github.com/roydukkey/sass-fairy/edit/master/website/docs/docs/regular-expressions.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Install",permalink:"/next/docs/install"},next:{title:"Reference Functions",permalink:"/next/docs/reference-functions"}},p={},l=[{value:"Syntax",id:"syntax",level:2},{value:"Flags",id:"flags",level:3},{value:"Type Checking",id:"type-checking",level:2}],d={toc:l};function c(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"regular-expressions"},"Regular Expressions"),(0,r.kt)("p",null,"Often shortened to ",(0,r.kt)("em",{parentName:"p"},"Regex")," or ",(0,r.kt)("em",{parentName:"p"},"RegExp"),", regular expressions are a ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"},"common feature of JavaScript"),". They use syntax to describe patterns of characters in strings."),(0,r.kt)("p",null,"Even though there isn\u2019t native Sass support for regular expressions, Sass Fairy is able to implement regular expressions support through the Sass JavaScript API. Don\u2019t worry though. All of the implementation remains hidden under the hood."),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"The syntax for Sass Fairy regular expressions is slightly different from JavaScript. In fact the only difference is the way regular expression literals are denoted. Instead of enclosing the pattern between slashes, the pattern is preceded by ",(0,r.kt)("inlineCode",{parentName:"p"},"REGEX")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// A regex in JavaScript:\nconst expression = /pat{2}ern/;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scss"},"// In Sass, this becomes:\n$expression: REGEX 'pat{2}ern';\n\n// Or, for shorthand:\n$expression: \\\\'pat{2}ern';\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"REGEX")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\")," are case sensitive and must be unquoted. Though, the pattern must be quoted."),(0,r.kt)("h3",{id:"flags"},"Flags"),(0,r.kt)("p",null,"With the exception of ",(0,r.kt)("inlineCode",{parentName:"p"},"s"),", all of the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#advanced_searching_with_flags"},"flags available in JavaScript")," can be used in Sass Fairy regular expressions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scss"},"$expression: REGEX gi 'pat{2}ern';\n$expression: \\\\gi'pat{2}ern';\n")),(0,r.kt)("h2",{id:"type-checking"},"Type Checking"),(0,r.kt)("p",null,"In order to determine whether a value is a regular expression, Sass Fairy has ",(0,r.kt)("a",{parentName:"p",href:"/next/api/meta/type-of"},"extended ",(0,r.kt)("inlineCode",{parentName:"a"},"meta.type-of()"))," in the ",(0,r.kt)("a",{parentName:"p",href:"/next/api/meta/"},(0,r.kt)("inlineCode",{parentName:"a"},"@sass-fairy/meta"))," module to add ",(0,r.kt)("inlineCode",{parentName:"p"},"regex")," as a type."))}c.isMDXComponent=!0}}]);