"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1492],{3573:(e,t,i)=>{i.d(t,{Z:()=>n});var a=i(575),r=i(9231),s=i(4270);const n=e=>{let{children:t}=e;return r.createElement(a.Z,{spec:s.Z},t)}},4270:(e,t,i)=>{i.d(t,{Z:()=>c,C:()=>l});const a=JSON.parse('{"WL":"Provides Sass functions to standardize exception messages and assist with common validation"}');var r=i(9231);const s={context:{description:"The name of the function or mixin issuing the error.",type:["String"]}},n={message:{description:"The message which describes the issue.",type:["String"]}},o={value:{description:"The value which was received.",type:["*"]}},p={types:{description:"The types which are expected.",type:["ArgList<*>"]}},d={...s,name:{description:"The name of the index parameter which is being validated.",type:["String"]},value:{description:"The value of the index parameter which is being validated. A valid negative value will be transformed to the respective positive index value.",type:["Number"]}},l="Must be passed by name.",c={module:"exception",description:a.WL,basePath:"/api/exception",functions:{"is-separator-invalid":{group:"main",description:"Indicates whether a specified value is invalid for a separator parameter.",parameters:{value:{description:"The value which is being validated.",type:["*"]}},return:{description:r.createElement(r.Fragment,null,r.createElement("code",null,"true")," if the value is a valid; otherwise, ",r.createElement("code",null,"false"),"."),type:["Boolean"]}},parameter:{group:"main",description:"Returns an error message stating an issue with one or more parameters.",parameters:{...n,...s,names:{description:"The names of the parameters for which there is an issue.",type:["ArgList<*>"]}},return:{description:"A string describing the reason one or more parameters are invalid.",type:["String"]}},"parameter-type":{group:"main",description:"Returns an error message stating a parameter received the wrong type.",parameters:{...s,name:{description:"The name of the parameter which has received the wrong type.",type:["String"]},...o,...p},return:{description:"A string describing what types are acceptable for a parameter and the value that is invalid.",type:["String"]}},separator:{group:"main",description:"Returns an error message stating a separator variable received the wrong value.",return:{description:"A string describing what values are acceptable for a separator.",type:["String"]},overloads:[{description:"Returns an error message stating a separator parameter received the wrong value.",parameters:{context:{...s.context}}}]},"validate-index":{group:"main",description:"Returns a valid index for a list of a given length; otherwise, an error message stating the reason the index is invalid.",parameters:{...d,list:{description:"The list value for which the index is validated against.",type:["List"]}},return:{description:"A string when the index is not a number, is zero, or is invalid for the amount of elements in the list; otherwise, a number.",type:["Number","String"]},overloads:[{description:"Returns a valid index for a string of a given length; otherwise, an error message stating the reason the index is invalid.",parameters:{...d,string:{description:"The string value for which the index is validated against.",type:["String"]}},return:{description:"A string when the index is not a number; otherwise, a number."}}]},variable:{group:"main",description:"Returns an error message stating an issue with one or more variables.",parameters:{...n,names:{description:"The names of the variables for which there is an issue.",type:["ArgList<*>"]}},return:{description:"A string describing the reason one or more variables are misconfigured.",type:["String"]}},"variable-type":{group:"main",description:"Returns an error message stating a variable received the wrong type.",parameters:{name:{description:"The name of the variable which has received the wrong type.",type:["String"]},...o,...p,message:{description:["The additional message which describes the issue.",l].join(" "),type:["String"],defaultValue:"null"}},return:{description:"A string describing what types are acceptable for a variable and the value that is misconfigured.",type:["String"]}}}}},3204:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>g,frontMatter:()=>p,highlight:()=>m,metadata:()=>l,toc:()=>h});var a=i(7626),r=(i(9231),i(4852)),s=i(3614),n=i(7024),o=i(3573);const p={title:"is-separator-invalid ()",module:"exception",sidebar_label:"is-separator-invalid",sidebar_class_name:"function",hide_table_of_contents:!0},d=void 0,l={unversionedId:"api/exception/is-separator-invalid",id:"api/exception/is-separator-invalid",title:"is-separator-invalid ()",description:"",source:"@site/docs/api/exception/is-separator-invalid.mdx",sourceDirName:"api/exception",slug:"/api/exception/is-separator-invalid",permalink:"/next/api/exception/is-separator-invalid",draft:!1,editUrl:"https://github.com/roydukkey/sass-fairy/edit/master/website/docs/api/exception/is-separator-invalid.mdx",tags:[],version:"current",frontMatter:{title:"is-separator-invalid ()",module:"exception",sidebar_label:"is-separator-invalid",sidebar_class_name:"function",hide_table_of_contents:!0},sidebar:"exceptionSidebar",previous:{title:"Exception API Overview",permalink:"/next/api/exception/"},next:{title:"parameter",permalink:"/next/api/exception/parameter"}},c={},h=[],m=[[".is-separator-invalid(",".separator("]],u={toc:h,highlight:m};function g(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(o.Z,{mdxType:"FieldDetails"}),(0,r.kt)(s.Z,{className:"language-scss",title:"@sass-fairy/list/src/_set-nth.sass",highlightKeywords:m,stripSassDocs:!0,rewriteFairyUses:!0,mdxType:"CodeBlock"},n.Z))}g.isMDXComponent=!0},7024:(e,t,i)=>{i.d(t,{Z:()=>a});const a="// Copyright (c) roydukkey. All rights reserved.\n// Licensed under the MIT. See LICENSE file in the project root for full license information.\n\n@use 'sass:list'\n@use 'sass:meta'\n@use '@sass-fairy/exception/src/is-separator-invalid'\n@use '@sass-fairy/exception/src/separator'\n@use '@sass-fairy/exception/src/validate-index'\n\n\n///\n/// @throw `#{$index}` is not a number.\n/// @throw List index may not be 0.\n/// @throw Invalid index #{$index} for a list with #{length} elements.\n/// @throw Must be \"space\", \"comma\", \"slash\", or \"auto\".\n///\n@function set-nth($list, $index, $value, $separator: auto)\n\t$index: validate-index.validate-index('set-nth', 'index', $index, $list)\n\n\t@if meta.type-of($index) != 'number'\n\t\t@error $index\n\n\t@if is-separator-invalid.is-separator-invalid($separator)\n\t\t@error separator.separator('set-nth')\n\n\t@return list.join(list.set-nth($list, $index, $value), (), $separator)\n\n"}}]);